package service;

import dao.CityDAO;
import dao.WeatherDAO;
import entity.City;
import entity.Weather;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

import java.time.LocalDate;
import java.util.List;
import java.util.Random;

@ApplicationScoped
public class WeatherService {

    @Inject
    private WeatherDAO weatherDAO;

    @Inject
    private CityDAO cityDAO;

    private final Random random = new Random();

    public Weather generateWeatherForCity(String cityName, LocalDate date) {
        // Récupérer la ville
        List<City> cities = cityDAO.getAllCities();
        City city = cities.stream().filter(c -> c.getName().equals(cityName)).findFirst().orElseThrow();

        // Générer les conditions météo
        double temperature;
        boolean isRainy;
        String condition;

        switch (city.getSeason()) {
            case "Printemps":
                temperature = 10 + random.nextDouble() * 15; // Température entre 10 et 25
                isRainy = random.nextInt(8) == 0;           // 1/8 chance de pluie
                condition = isRainy ? "Pluvieux" : "Ensoleillé";
                break;
            case "Été":
                temperature = 20 + random.nextDouble() * 15; // Température entre 20 et 35
                isRainy = random.nextInt(10) == 0;          // 1/10 chance de pluie
                condition = isRainy ? "Pluvieux" : "Ensoleillé";
                break;
            case "Automne":
                temperature = 5 + random.nextDouble() * 15; // Température entre 5 et 20
                isRainy = random.nextInt(6) == 0;           // 1/6 chance de pluie
                condition = isRainy ? "Pluvieux" : "Nuageux";
                break;
            case "Hiver":
                temperature = -10 + random.nextDouble() * 15; // Température entre -10 et 5
                isRainy = random.nextInt(5) == 0;            // 1/5 chance de neige
                condition = isRainy ? "Neigeux" : "Nuageux";
                break;
            default:
                throw new IllegalArgumentException("Saison invalide : " + city.getSeason());
        }

        // Créer et sauvegarder la météo
        Weather weather = new Weather();
        weather.setCity(city);
        weather.setDate(date);
        weather.setTemperature(temperature);
        weather.setRainy(isRainy);
        weather.setCondition(condition);
        weatherDAO.saveWeather(weather);

        return weather;
    }
}
